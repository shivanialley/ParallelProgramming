Python(Program) file
	consist of functions, classes and variables(Data)

	If these functions, classes and data from one python file has to be used in another python file, here the one to be used is referred to as a module

	Every python file is a module which can be used in other python program files by using import statements

	In simple terms we can consider a module to be same as code library or file containing  functions(classes/data) that you want to include in your program/application/app

	Different ways of using import
	1. import moduleIntro #if we have to call then we have to use moduleIntro.fun()
	2. from moduleIntro import * #if we have to call then we have to use fun()
	3. from moduleIntro import funOne,dataOne
	4. import moduleIntro as mi


	Collection of module (Python files) is a package (folder)
	1. import myPkg.moduleIntro
	2. import myPkg.moduleIntro as mp
	3. from myPkg.moduleIntro import *
	4. from myPkg.moduleIntro import funOne, dataOne
	5. from myPkg import moduleIntro

try these modules:-
	datetime
	time
	sys #for memory device 
	os #for command line

Note:-
	__pycache__ folder create have import file & easy to use bit in that cpython file
  


	Module : multiprocessing
		This module gives/provides/supports process based parallelism
		we can do with fork()


	ps #active process list
	top#top most process list

	Pool class in Multiprocess....
		Pool is a collection of multiple process...
		rather than creating objects (of Process) and then starting and then joining.......
		We can avoid all those things here using the Pool class

	map function ----> have you come accross this function in python
		map() maps a function to an iterator......
			any thing which is a collection or which can be used in a loop, such objects are called iterable objects

		map(fun, [1,2,4,5,6,7])
			--->this is what map will do i.e, fun() is called for each value in the list

	Pool class provides its own map() so to enable maping of data to child(new) processes....... collect the result of each processes and return the list of results of all child processes.


	Each process
		main
			Process Object
			pObj.start()

		Since each process has its own resources.. like, ids(pid,ppid,uid, euid, gid, egid)... files opened, data...
		If more than one process wants to work with other processes to achieve, there should be some mode of communications
		In UNIX?LINUX environment, we call them IPC(Inter Process Communication)
			There are different modes og IPC
				1. pipes
					named
					unnamed
				2. signals (software interrupts)
				3. Sys V IPC
					---> message queues
					---> shared memory
					---> Semaphores
				5. POSIX IPC
					---> message queues
                                        ---> shared memory
                                        ---> Semaphores
				6. Memory Mapping
				7. File Locking
				8. Sockets

		Python multiprocessing module provides some channels
			like Queue class, Pipe class

		Let us see a simple program Queue as an IPC


		Read these topics:-
		Multi processing:
			pipes
			shared memory
			semaphore
			pool executor
		Multithreading on Python
